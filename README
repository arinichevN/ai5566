Многоканальный модуль ввода для микросхем MAX6675 и MAX31855 для платформы Arduino.
Каждый канал может быть настроен для работы с MAX6675 либо с MAX31855.
Каждый канал с заданным периодом опрашивает свою микросхему.  Результаты опроса сохраняет в буфер. 
При поступлении запроса по UART на получение измерений от канала, модуль ввода отправляет ответ с данными 
из буфера канала. В сети модуль ввода ведёт себя как ведомое устройство. 
1 Установка
1.1 Требования
Использует стандартные библиотеки Arduino.
1.2 Настройки:
Там, где есть метка "-user_config:", можно редактировать исходный код.
файл ./app.h:
	общие настройки;
файл ./app/config.h:
	параметры приложения;
файл ./app/config.c:
	параметры UART;
файл ./model/channel.h:
	количество каналов и параметры по-умолчанию.
файл ./model/channel.c:
	параметры для каналов.
2 Использование
Интерфейс пользователя включает в себя UART-сервер, принимающий команды для управления приложением. 
Если после перезагрузки микроконтроллера, горит светодиод, подключенный к INDICATOR_PIN (./app.h), то
есть ошибка в настройках параметров. Если этот светодиод загорается в процессе работы, то по одному из
каналов не удается прочитать данные с микросхемы.
2.1 Управление приложением через UART.
Каждый из UART микроконтроллера может быть настроен для работы в режиме сервера или для вывода отладочных сообщений.
Отладочные сообщения можно выводить только на один из UART. Сервера можно привязать к несколькоим UART, тогда
микроконтроллер сможет работать одновременно с несколькими клиентами. Все поддерживаемые команды
можно найти в файле ./app/server_config.c (функция acpls_buildNodes()).
Запросы и ответы представляют собой текстовые строки в формате:
<команда;идентификатор;данные;контрольнаяСумма>
	, где:
		< - начало пакета,
		; - разделитель,
		> - конец пакета.
В зависимости от команды, в качестве идентификатора может выступать номер канала, номер приложения.
Для избежания конфликтов, идентификаторы должны быть уникальными в пределах одной сети.
Чтобы иметь возможность отправлять запросы устройству через Arduino Serial Monitor, нужно отключить
проверку контрольной суммы, установив в 0 константу ACP_CHECK_CRC в файле ./acp/main.h.
Примеры команд:
	для канала приложения с идентификатором 1:
		запустить канал (загрузить настройки из ПЗУ в ОЗУ, активировать, сохранить, начать работу):
		<cst;1;?>
		получить результаты измерения микросхемы:
		<gfts;1;?>
2.2. Управление с помощью Arduino терминала.
Приложение aui для плат Arduino позволяет платам подключаться по последовательному интерфейсу к данному приложению и
управлять им.
2.3. Управление с помощью ПК.
Приложение gwst для POSIX совместимых ОС связывает последовательные порты терминала с 
интернетом, а приложение для веб-браузера wui позволяет пользователю взаимодействовать
с данным приложением.




